package core

const loadAddress = 512

type Memory struct {
	Mem [4096]byte
}

func NewMemory() *Memory {
	return &Memory{
		Mem: [4096]byte{},
	}
}

func (m *Memory) LoadDisk(data []byte) {
	memBytes := []byte{
		// 0,
		0xF0,
		0x90,
		0x90,
		0x90,
		0xF0,
		// 1,
		0x20,
		0x60,
		0x20,
		0x20,
		0x70,
		// 2,
		0xF0,
		0x10,
		0xF0,
		0x80,
		0xF0,
		// 3,
		0xF0,
		0x10,
		0xF0,
		0x10,
		0xF0,
		// 4,
		0x90,
		0x90,
		0xF0,
		0x10,
		0x10,
		// 5,
		0xF0,
		0x80,
		0xF0,
		0x10,
		0xF0,
		// 6,
		0xF0,
		0x80,
		0xF0,
		0x90,
		0xF0,
		// 7,
		0xF0,
		0x10,
		0x20,
		0x40,
		0x40,
		// 8,
		0xF0,
		0x90,
		0xF0,
		0x90,
		0xF0,
		// 9,
		0xF0,
		0x90,
		0xF0,
		0x10,
		0xF0,
		// A,
		0xF0,
		0x90,
		0xF0,
		0x90,
		0x90,
		// B,
		0xE0,
		0x90,
		0xE0,
		0x90,
		0xE0,
		// C,
		0xF0,
		0x80,
		0x80,
		0x80,
		0xF0,
		// D,
		0xE0,
		0x90,
		0x90,
		0x90,
		0xE0,
		// E,
		0xF0,
		0x80,
		0xF0,
		0x80,
		0xF0,
		// F,
		0xF0,
		0x80,
		0xF0,
		0x80,
		0x80,
	}
	for i, b := range memBytes {
		m.Mem[i] = b
	}
	for i := 0; i < len(data); i++ {
		m.Mem[loadAddress+i] = data[i]
	}
}
